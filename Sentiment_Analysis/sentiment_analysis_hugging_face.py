# -*- coding: utf-8 -*-
"""Sentiment_Analysis_Hugging_Face.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U3PzRLhXtDcpAQL-6LWn0-5xwWQ9_6zI

#Sentiment Analysis Using Hugging Face

Importing Necessary Libraries
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score, confusion_matrix, roc_auc_score

from transformers import pipeline

import torch

"""Downloading the pre-trained sentiment Analysis pipeline"""

classifier = pipeline("sentiment-analysis")
type(classifier)

"""Lets check the sentiment analysis"""

classifier("This is a Great Movie")

"""checking mutiple sentiments"""

classifier([
    "This is a Great Movie",
    "The acting was poor"
    ])

"""Importing the tweets dataset and checking top 5"""

airline_tweets=pd.read_csv("Tweets.csv")
airline_tweets.head(5)

"""Taking the top 5 from the airline_sentiment and text cloumns"""

df = airline_tweets[['airline_sentiment', "text"]]
df.head(5)

"""Visualizing the positive negative and neutral sentiments by count using the countplot"""

sns.countplot(df, x='airline_sentiment',palette='viridis');
plt.xlabel('Airline Sentiment')
plt.ylabel('count')
plt.show()

df = df[df['airline_sentiment'] != 'neutral']

df['target'] = df['airline_sentiment'].map({'positive': 1, 'negative': 0})

print("number of rows:",df.shape[0])

texts = df['text'].tolist()
predictions = classifier(texts)
predictions[:5]

probs = [pred['score'] if pred['label'].startswith('P') else 1 - pred['score'] for pred in predictions]

preds = np.array([1 if pred['label'].startswith('P') else 0 for pred in predictions])

"""Checking the Accuracy"""

print(f"Accuracy: {round(np.mean(df['target'] == preds) *100, 2)}")

"""Ploting the confusion matrix using heatmaps"""

cm = confusion_matrix(df['target'], preds, normalize = 'true')

def plot_confusion_matrix(confusion_matrix, labels):
  plt.figure(figsize=(8, 6))
  sns.set(font_scale=1.4)

  sns.heatmap(confusion_matrix, annot=True, fmt = 'g', cmap='Blues', xticklabels=labels, yticklabels=labels)

  plt.title('Confusion Matrix')
  plt.xlabel('Predicted Values')
  plt.ylabel('Actual values')
  plt.show()

plot_confusion_matrix(cm, ["Negative", "Positive"])

"""Checking Roc Auc Score"""

print(f"roc auc score: {roc_auc_score(df['target'], probs)}")